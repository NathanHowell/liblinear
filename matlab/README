----------------------------------------------
--- Document for MATLAB interface of LIBLR ---
----------------------------------------------

Table of Contents
=================

- Introduction
- Installation
- Usage
- Returned Model Structure
- Examples
- Other Utilities
- Additional Information


Introduction
============

This tool provides a simple interface to LIBLR, a library for large-scale
regularized logistic regression (http://www.csie.ntu.edu.tw/~cjlin/liblr).
It is very easy to use as the usage and the way of specifying parameters
are the same as that of LIBLR.

Installation
============

On Unix systems, we recommend using GNU g++ (version < 3.4) as your
compiler and type 'make' to build 'lrtrain.mexglx' and 'lrpredict.mexglx'.
Note that we assume your MATLAB is installed in '/usr/local/matlab',
if not, please change MATLABDIR in Makefile.

Example:
        linux> make

On Windows systems, pre-built 'lrtrain.dll' and 'lrpredict.dll' are
included in this package, so no need to conduct installation. If you
have modified the sources and would like to re-build the package, type
'mex -setup' in MATLAB to choose a compiler for mex first. Then type
'make' to start the installation.

Example:
        matlab> mex -setup
        (ps: MATLAB will show the following messages to setup default compiler.)
        Please choose your compiler for building external interface (MEX) files: 
        Would you like mex to locate installed compilers [y]/n? y
        Select a compiler: 
        [1] Microsoft Visual C/C++ version 6.0 in C:\Program Files\Microsoft Visual Studio 
        [0] None 
        Compiler: 1
        Please verify your choices: 
        Compiler: Microsoft Visual C/C++ 6.0 
        Location: C:\Program Files\Microsoft Visual Studio 
        Are these correct?([y]/n): y

        matlab> make

For list of supported/compatible compilers for MATLAB, please check the
following page:

http://www.mathworks.com/support/tech-notes/1600/1601.html

Usage
=====

matlab> model = lrtrain(training_label_vector, training_instance_matrix, [,'liblr_options']);

        -training_label_vector:
            An m by 1 vector of training labels.
        -training_instance_matrix:
            An m by n matrix of m training instances with n features.
            It can be dense or sparse.
        -liblr_options:
            A string of training options in the same format as that of LIBLR.

matlab> [predicted_label, accuracy, prob_estimates] = lrpredict(testing_label_vector, testing_instance_matrix, model);

        -testing_label_vector:
            An m by 1 vector of prediction labels. If labels of test
            data are unknown, simply use any random values.
        -testing_instance_matrix:
            An m by n matrix of m testing instances with n features.
            It can be dense or sparse.
        -model:
            The output of lrtrain.

Returned Model Structure
========================

The 'lrtrain' function returns a model which can be used for future
prediction.  It is a structure and is organized as [nr_class,
nr_feature, Label, w]:

        -nr_class: number of classes
        -nr_feature: number of features in training data (without including the bias term)
        -bias: If >= 0, we assume one additional feature is added to the end of each data instance.
        -Label: label of each class
        -w: a n-by-nr_classifier matrix for the weights, where n is nr_feature or nr_feature+1 depending on the existence of the bias term. nr_classifier is the number of trained classifiers.
            It is 1 if nr_class=2, and is nr_class otherwise.

If the '-v' option is specified, cross validation is conducted and the
returned model is just a scalar: cross-validation accuracy.

Result of Prediction
====================

The function 'lrpredict' has three outputs. The first one,
predicted_label, is a vector of predicted labels. The second output
is a scalar meaning accuracy.  The third is a matrix
containing probability estimates.  If k is the number of classes, 
each row contains k values indicating the probability that the testing instance is in
each class. Note that the order of classes here is the same as 'Label'
field in the model structure.

Examples
========

Train and test on the provided data heart_scale:

matlab> [heart_scale_label, heart_scale_inst] = read_sparse('../heart_scale');
matlab> model = lrtrain(heart_scale_label, heart_scale_inst, '-c 1');
matlab> [predict_label, accuracy, prob_estimates] = lrpredict(heart_scale_label, heart_scale_inst, model); % test the training data

Note that for testing, you can put anything in the testing_label_vector.

Other Utilities
===============

A matlab function read_sparse reads files in LIBLR format: 

[label_vector, instance_matrix] = read_sparse(fname); 

Two outputs are labels and instances, which can then be used as inputs
of lrtrain or lrpredict. This code is derived from svm-train.c in
LIBSVM by Rong-En Fan from National Taiwan University.

Additional Information
======================

This interface was written by Xiang-Rui Wang from Department of Computer Science,
National Taiwan University.  please cite LIBLR as follows

C.-J. Lin, R. C. Weng, and S. S. Keerthi.
Trust region Newton method for large-scale regularized logistic
regression. Technical report, 2007. A short version appears
in ICML 2007. Software available at http://www.csie.ntu.edu.tw/~cjlin/liblr

For any question, please contact Chih-Jen Lin <cjlin@csie.ntu.edu.tw>.

